source ~/.vimrc

" ---- Plugins ----
"Plug 'easymotion/vim-easymotion'
"Plug 'justinmk/vim-sneak'
"Plug 'preservim/nerdtree'
"Plug 'tpope/vim-surround'
"Plug 'terryma/vim-multiple-cursors'
"Plug 'tpope/vim-commentary'
"Plug 'machakann/vim-highlightedyank'

set multiple-cursors
set matchit
set commentary
set surround " Can cause conflicts with mappings for sneak
set sneak
set multiple-cursors
set matchit
set commentary
set quickscope
set argtextobj
set highlightedyank
set easymotion
set nerdtree
set which-key
set NERDTree

" ---- IDEA vim settings ----

set notimeout " this also applied to easymotion
set autosave
set ideamarks
set ideaput
set idearefactormode=keep

" ---- Plugin settings ----
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']
let g:argtextobj_pairs="[:],(:),<:>"

let g:highlightedyank_highlight_duration = "800"

let g:WhichKey_SortOrder = "by_key_prefix_first"
let g:WhichKey_ShowVimActions = "true"

let g:WhichKeyDesc_leader = "<leader> Leader key"

"let g:WhichKeyDesc_comment = "<leader>c Comment line"

let g:WhichKeyDesc_close_tab = "<leader>q Close tab"

let g:WhichKeyDesc_code = "<leader>c +Code"
let g:WhichKeyDesc_code_eslint_fix = "<leader>cl Eslint fix"
let g:WhichKeyDesc_code_prettier_format = "<leader>cp Prettier format"
let g:WhichKeyDesc_code_optimize_imports = "<leader>ci Optimize imports"

let g:WhichKeyDesc_window = "<leader>w +Windows"
let g:WhichKeyDesc_window_split_vert = "<leader>wv Split vertically"
let g:WhichKeyDesc_window_split_horiz = "<leader>wh Split horizontally"
let g:WhichKeyDesc_window_unsplit = "<leader>wu Unsplit"
let g:WhichKeyDesc_window_move_to_opposite = "<leader>wm Move to opposite"
let g:WhichKeyDesc_window_maximize_split = "<leader>we Maximize split"

let g:WhichKeyDesc_actions = "<leader>a +Actions"
let g:WhichKeyDesc_actions_save_all = "<leader>as Save all"
let g:WhichKeyDesc_actions_search_everywhere = "<leader>aa Search everywhere"
let g:WhichKeyDesc_actions_editor_context_info = "<leader>am Editor context info"
let g:WhichKeyDesc_actions_hover_info = "<leader>ah Show hover info"
let g:WhichKeyDesc_actions_intentions = "<leader>ai Show intentions"

let g:WhichKeyDesc_goto = "<leader>g +Goto"
let g:WhichKeyDesc_goto_declaration = "<leader>gd Declaration"
let g:WhichKeyDesc_goto_implementation = "<leader>gi Implementation"
let g:WhichKeyDesc_goto_usages = "<leader>gu Usages"
let g:WhichKeyDesc_goto_type_declarations = "<leader>gy Type declarations"
let g:WhichKeyDesc_goto_back = "<leader>gh Back"
let g:WhichKeyDesc_goto_forward = "<leader>gl Forward"
let g:WhichKeyDesc_goto_content_in_path = "<leader>gf Find in path"

let g:WhichKeyDesc_file = "<leader>f +File"
let g:WhichKeyDesc_file_find = "<leader>ff Goto file"
let g:WhichKeyDesc_file_recent_locations = "<leader>fl Recent locations"
"let g:WhichKeDesc_file_recent = "<leader>fr Recent Files"
let g:WhichKeyDesc_file_new = "<leader>fn New File"
let g:WhichKeyDesc_file_scratch = "<leader>fs New Scratch File"
let g:WhichKeyDesc_file_rename = "<leader>fc Rename"
let g:WhichKeyDesc_nerdtree_toggle = "<leader>fe NERDTreeToggle"

let g:WhichKeyDesc_bookmark = "<leader>b +Bookmark"
let g:WhichKeyDesc_bookmark_toggle = "<leader>bm Toggle bookmark"
let g:WhichKeyDesc_bookmark_show = "<leader>ba Show bookmarks"

let g:WhichKeyDesc_errors_next = "<leader>e Goto next error"
let g:WhichKeyDesc_errors_prev = "<leader>E Goto previous error"

let g:WhichKeyDesc_refactor = "<leader>r +Refactor"
let g:WhichKeyDesc_refactor_rename = "<leader>rn Rename element"
let g:WhichKeyDesc_refactor_introduce_var = "<leader>rv Introduce Local Variable"

let g:WhichKeyDesc_occurrences_select_next = "<leader>Ctrl+n Select Next Occurrence"
let g:WhichKeyDesc_occurrences_select_prev = "<leader>Ctrl+Shift+n Select Prev Occurrence"
let g:WhichKeyDesc_occurrences_select_all = "<leader>gCtrl+n Select All Whole Occurrences"

" ---- IDEA vim keymaps ----

" Close active tab
map <leader>q <Action>(CloseContent)

" Code
map <leader>cl <Action>(Javascript.Linters.EsLint.Fix)
map <leader>cp <Action>(ReformatWithPrettierAction)
map <leader>ci <Action>(OptimizeImports)

" Windows and splits
map <leader>wu <Action>(Unsplit)
map <leader>wh <Action>(SplitHorizontally)
map <leader>wv <Action>(SplitVertically)
map <leader>wm <Action>(MoveEditorToOppositeTabGroup)
map <leader>we <Action>(MaximizeEditorInSplit)

" Actions
map <leader>as <Action>(SaveAll)
map <leader>aa <Action>(SearchEverywhere)
map <leader>am <Action>(EditorContextInfo)
map <leader>ah <Action>(ShowHoverInfo)
map <leader>ai <Action>(ShowIntentionActions)

" Goto
map <leader>gd <Action>(GotoDeclaration)
map <leader>gi <Action>(GotoImplementation)
map <leader>gu <Action>(ShowUsages)
map <leader>gy <Action>(GotoTypeDeclaration)
map <leader>gh <Action>(Back)
map <leader>gl <Action>(Forward)
map <leader>gf <Action>(FindInPath)

"map <leader>c <Action>(CommentByLine)
"map <leader>cb <Action>(CommentByBlockComment)

" Files
"nmap <leader>fr <Action>(RecentFiles)
map <leader>fl <Action>(RecentLocations)
map <leader>ff <Action>(GotoFile)
map <leader>fn <Action>(NewFile)
map <leader>fs <Action>(NewScratchFile)
map <leader>fc <Action>(RenameFile)
nmap <leader>fe :NERDTreeToggle<CR>

" Bookmarks
map <leader>bm <Action>(ToggleBookmark)
map <leader>ba <Action>(ShowBookmarks)

" Errors
map <Leader>e <Action>(GotoNextError)
map <leader>E <Action>(GotoPreviousError)

" Refactoring
map <leader>rn <Action>(RenameElement)
map <leader>rv <Action>(IntroduceVariable)

"map <C-S-n> <Action>(SelectPreviousOccurrence)
"map <C-p> <Action>(RemoveOccurrence)

nmap g<C-n> <Plug>NextWholeOccurrence
xmap g<C-n> <Plug>NextWholeOccurrence
omap g<C-n> <Plug>NextWholeOccurrence
nmap <C-n> <Plug>NextOccurrence
xmap <C-n> <Plug>NextOccurrence
omap <C-n> <Plug>NextOccurrence
nmap <S-C-n> <Plug>PrevOccurrence
xmap <S-C-n> <Plug>PrevOccurrence
omap <S-C-n> <Plug>PrevOccurrence
xmap <C-x> <Plug>SkipOccurrence
xmap <C-p> <Plug>RemoveOccurrence

" Note that the default <A-n> and g<A-n> shortcuts don't work on Mac due to dead keys.
" <A-n> is used to enter accented text, e.g., Ã±
nmap <S-C-n> <Plug>AllWholeOccurrences
xmap <S-C-n> <Plug>AllWholeOccurrences
omap <S-C-n> <Plug>AllWholeOccurrences
nmap g<S-C-n> <Plug>AllOccurrences
xmap g<S-C-n> <Plug>AllOccurrences
omap g<S-C-n> <Plug>AllOccurrences


"nmap <leader>g<C-n> <Plug>AllWholeOccurrences
"xmap <leader>g<C-n> <Plug>AllWholeOccurrences
"nmap <leader>gg<C-n> <Plug>AllOccurrences
"xmap <leader>gg<C-n> <Plug>AllOccurrences

map <S-J> <Action>(MoveLineDown)
map <S-K> <Action>(MoveLineUp)

map [[ <Action>(MethodUp)
map ]] <Action>(MethodDown)

nmap ds <Plug>Dsurround
nmap cs <Plug>Csurround
nmap ys <Plug>Ysurround



test

testing

test
