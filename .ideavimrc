source ~/.vimrc

" ---- Plugins ----
"Plug 'easymotion/vim-easymotion'
"Plug 'justinmk/vim-sneak'
"Plug 'preservim/nerdtree'
"Plug 'tpope/vim-surround'
"Plug 'terryma/vim-multiple-cursors'
"Plug 'tpope/vim-commentary'
"Plug 'machakann/vim-highlightedyank'

set multiple-cursors
set matchit
set commentary
set surround " Can cause conflicts with mappings for sneak
"set sneak
set multiple-cursors
set matchit
set commentary
set quickscope
set argtextobj
set highlightedyank
set easymotion
set nerdtree
set which-key
set NERDTree

" ---- IDEA vim settings ----

set notimeout " this also applied to easymotion
set autosave
set ideamarks
set ideaput
set idearefactormode=keep

" ---- Plugin settings ----
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']
let g:argtextobj_pairs="[:],(:),<:>"

let g:highlightedyank_highlight_duration = "800"

let g:WhichKey_SortOrder = "by_key_prefix_first"
let g:WhichKey_ShowVimActions = "true"

let g:WhichKeyDesc_leader = "<leader> Leader key"

let g:WhichKeyDesc_errors_next = "<leader>e Goto next error"
let g:WhichKeyDesc_errors_prev = "<leader>E Goto previous error"


" ---- IDEA vim keymaps ----

" Close active tab

" Code
let g:WhichKeyDesc_code = "<leader>c [C]ode"

let g:WhichKeyDesc_code_eslint_fix = "<leader>cl [C]ode [L]int fix"
map <leader>cl <Action>(Javascript.Linters.EsLint.Fix)

let g:WhichKeyDesc_code_prettier_format = "<leader>cp [C]ode [P]retty"
map <leader>cp <Action>(ReformatWithPrettierAction)

let g:WhichKeyDesc_code_optimize_imports = "<leader>ci [C]ode optimize [I]mports"
map <leader>ci <Action>(OptimizeImports)

let g:WhichKeyDesc_code_actions = "<leader>ca [C]ode [A]ctions"
map <leader>ca <Action>(ShowIntentionActions)

let g:WhichKeyDesc_code_rename_element = "<leader>cr [C]ode [R]ename [E]lement"
map <leader>cre <Action>(RenameElement)

let g:WhichKeyDesc_code_rename_file = "<leader>cr [C]ode [R]ename [F]ile"
map <leader>crf <Action>(RenameFile)

" Windows and splits
let g:WhichKeyDesc_window = "<leader>w [W]indows"

let g:WhichKeyDesc_window_unsplit = "<leader>wu [W]indow [U]nsplit"
map <leader>wu <Action>(Unsplit)

let g:WhichKeyDesc_window_split_horiz = "<leader>wh [W]indow split [H]orizontally"
map <leader>wh <Action>(SplitHorizontally)

let g:WhichKeyDesc_window_split_vert = "<leader>wv [W]indow split [V]ertically"
map <leader>wv <Action>(SplitVertically)

let g:WhichKeyDesc_window_move_to_opposite = "<leader>wm [W]indow [M]ove to opposite"
map <leader>wm <Action>(MoveEditorToOppositeTabGroup)

let g:WhichKeyDesc_window_maximize_split = "<leader>we [W]indow [E]xpand split"
map <leader>we <Action>(MaximizeEditorInSplit)

let g:WhichKeyDesc_window_close = "<leader>wq [W]indow [Q]ui"
map <leader>wq <Action>(CloseContent)

" Goto
let g:WhichKeyDesc_goto = "<leader>g [G]oto"

let g:WhichKeyDesc_goto_definition = "<leader>gd [G]oto [D]efinitions"
map <leader>gd <Action>(GotoDeclaration)

let g:WhichKeyDesc_goto_implementation = "<leader>gi [G]oto [I]mplementations"
map <leader>gi <Action>(GotoImplementation)

let g:WhichKeyDesc_goto_references = "<leader>gr [G]oto [R]eferences"
map <leader>gr <Action>(ShowUsages)

let g:WhichKeyDesc_goto_type_definition = "<leader>gy [G]oto [T]ype definition"
map <leader>gy <Action>(GotoTypeDeclaration)

let g:WhichKeyDesc_goto_type_symbol = "<leader>gs [G]oto [S]ymbols"
map <leader>gs <Action>(GotoSymbol)

" Files
let g:WhichKeyDesc_search = "<leader>s [S]earch"

let g:WhichKeyDesc_search_current_word = "<leader>sw [S]earch current [W]ord"
map <leader>sw <Action>(FindInPath)

let g:WhichKeyDesc_search_current_word = "<leader>s. [S]earch recent files ("." for repeat)"
map <leader>s. <Action>(RecentLocations)

let g:WhichKeyDesc_search_files = "<leader>sf [S]earch [S]elect files"
map <leader>ss <Action>(GotoFile)

" Harpoon (Bookmarks)
let g:WhichKeyDesc_harpoon = "<leader>h [H]arpoon"

let g:WhichKeyDesc_harpoon_toggle = "<leader>ht [H]arpoon [T]oggle"
map <leader>ht <Action>(ToggleBookmark)

"let g:WhichKeyDesc_harpoon_show = "<leader>ba Show bookmarks"
map <leader>ha <Action>(ShowBookmarks)

" Errors
map <Leader>e <Action>(GotoNextError)
map <leader>E <Action>(GotoPreviousError)

let g:WhichKeyDesc_occurrences_select_next = "Ctrl+n Select Next Occurrence"
nmap <C-n> <Plug>NextOccurrence
xmap <C-n> <Plug>NextOccurrence
omap <C-n> <Plug>NextOccurrence

let g:WhichKeyDesc_occurrences_select_prev = "Shift+Ctrl+n Select Prev Occurrence"
nmap <S-C-n> <Plug>PrevOccurrence
xmap <S-C-n> <Plug>PrevOccurrence
omap <S-C-n> <Plug>PrevOccurrence

let g:WhichKeyDesc_occurrences_next_whole = "Ctrl+m Select Next Whole Occurrences"
nmap g<C-n> <Plug>NextWholeOccurrence
xmap g<C-n> <Plug>NextWholeOccurrence
omap g<C-n> <Plug>NextWholeOccurrence

let g:WhichKeyDesc_occurrences_next_whole = "Ctrl+m Select Next Whole Occurrences"
nmap <C-m> <Plug>PrevWholeOccurrence
xmap <C-m> <Plug>PrevWholeOccurrence
omap <C-m> <Plug>PrevWholeOccurrence

let g:WhichKeyDesc_occurrences_skip = "Ctrl+j Skip Occurrence"
xmap <C-j> <Plug>SkipOccurrence

let g:WhichKeyDesc_occurrences_remove= "Ctrl+x Remove Occurrence"
xmap <C-x> <Plug>RemoveOccurrence

let g:WhichKeyDesc_occurrences_next_whole = "gCtrl+n Select All Whole Occurrences"
nmap g<C-n> <Plug>AllWholeOccurrences
xmap g<C-n> <Plug>AllWholeOccurrences
omap g<C-n> <Plug>AllWholeOccurrences

map <S-J> <Action>(MoveLineDown)
map <S-K> <Action>(MoveLineUp)

map [[ <Action>(MethodUp)
map ]] <Action>(MethodDown)

"nmap ds <Plug>Dsurround
"nmap cs <Plug>Csurround
"nmap ys <Plug>Ysurround
